plugins {
	id 'org.springframework.boot' version '2.5.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'com.server'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// *** Spring Starter *** //
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'	// data JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-redis' //redis
	implementation 'org.springframework.boot:spring-boot-starter-security' //security
	implementation 'org.springframework.boot:spring-boot-starter-validation' //validation
	implementation 'org.springframework.boot:spring-boot-starter-web' 	// starter web

	// *** jwt *** //
	implementation 'io.jsonwebtoken:jjwt-api:0.11.1'
	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.1'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.1'

	// *** swagger *** //
	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'

	// *** h2 *** //
	runtimeOnly 'com.h2database:h2'

	// *** dev tool and test *** //
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// *** lombok *** //
	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
}

test {
	jacoco {
		enabled = true
		destinationFile = file("$buildDir/jacoco/${name}.exec")
		includes = []
		excludes = []
		excludeClassLoaders = []
		includeNoLocationClasses = false
		sessionId = "<auto-generated value>"
		dumpOnExit = true
		classDumpDir = null
		output = JacocoTaskExtension.Output.FILE
		address = "localhost"
		port = 6300
		jmx = false
	}
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacoco {
	toolVersion = '0.8.7'
}

jacocoTestReport {
	reports {
		html.enabled true
		csv.enabled false
		xml.enabled false
	}
	afterEvaluate {
		classDirectories.from = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/exception/**'
					,'**/dto/**'
					,'**/EZY/EzyApplication*'
					,'**/EZY/**/*Test*'
			])
		})
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			// 룰을 키고 끌 수 있다.
			enabled = true

			// 룰을 체크할 단위
			element = 'BUNDLE'

			// Java 바이트코드 를 통한 코드실행
			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.70
			}

			// 브렌치(분기문) 커버리지
			limit{
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0
			}



		}
	}
}
